  // For information and examples see:
  // https://link.wokwi.com/custom-chips-alpha
  //
  // SPDX-License-Identifier: MIT
  // Copyright (C) 2022 Uri Shaked / wokwi.com

  // https://wokwi.com/makers/urish

  // original project https://wokwi.com/projects/333785509332517459

  #include "wokwi-api.h"
  #include <stdio.h>
  #include <stdlib.h>
  #include <string.h>    // contains strlen() function

  #define LEN(arr) ((int)(sizeof(arr) / sizeof(arr)[0]))    // macro

  #define SECOND 5000000    // micros

  // A NMEA 0183 sentence can have a maximum of 80 characters plus a
  // carriage return and a line feed

  /* NMEA_ARRAY_DATA */

  typedef struct {
    uart_dev_t uart0;
    uint32_t   gps_tx_index;
  } chip_state_t;


  static void chip_timer_event  (void *user_data);


  void chip_init(void) {

    setvbuf(stdout, NULL, _IOLBF, 1024);                // ???     // Disable buffering for debug logs

    chip_state_t *chip = malloc(sizeof(chip_state_t));

    const uart_config_t uart_config = {
      .tx         = pin_init("TX", INPUT_PULLUP),
      .rx         = pin_init("RX", INPUT),
      .baud_rate  = 9600,
      .user_data  = chip,
    };

    chip->uart0        = uart_init(&uart_config);
  
    chip->gps_tx_index = 0;

    const timer_config_t timer_config = {
      .callback  = chip_timer_event,
      .user_data = chip,
    };

    timer_t timer = timer_init(&timer_config);

    timer_start(timer, SECOND, true);

    printf("GPS Chip initialized!\n");         // prints to web browser console (developer tools)

  }

  void chip_timer_event(void *user_data) {

    chip_state_t *chip = (chip_state_t*) user_data;

    printf("chip_timer_event\n");
//  printf ("LEN(gps_tx_data):  %d\n", LEN(gps_tx_data)   );    // number of messages
//  printf ("message length  :  %d\n", strlen(message)    );    // actual message length
//  printf ("gps_tx_index    :  %u\n", chip->gps_tx_index );    // message index

    const char * message = gps_tx_data[chip->gps_tx_index++];

    uart_write(chip->uart0, (uint8_t *) message, strlen(message));

    if (chip->gps_tx_index >= LEN(gps_tx_data)) {       
      chip->gps_tx_index = 0;
    }
  }

